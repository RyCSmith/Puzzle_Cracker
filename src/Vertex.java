package backtracking;

import java.util.ArrayList;

/**
 * Vertex class - used to represent graph generated by Backtracking.java
 * @author Ryan Smith
 */
public class Vertex {
	private int index;
	private ArrayList<Integer> connections;
	
	/**
	 * No argument constructor;
	 */
	public Vertex(){
		
	}
	
	/**
	 * Constructor w/args
	 * @param index index of this vertex in puzzle
	 * @param ... variable number of int arguments - indices of all connecting vertices
	 */
	public Vertex(int index, int ... args){
		this.index = index;
		this.connections = new ArrayList<Integer>();
		for (int i = 0; i < args.length; i++){
			this.connections.add(args[i]);
		}
	}
	
	/**
	 * Determines whether or not 2 vertices are connected in the graph
	 * @param v - Vertex 
	 * @return boolean Returns true if this Vertex has directed edge to vertex passed as argument
	 */
	public boolean connects(Vertex v){
		for (int index : connections){
			if (index == v.getIndex())
				return true;
		}
		return false;
	}
	
	/**
	 * Returns index of this vertex
	 * @return int This vertex index
	 */
	public int getIndex(){
		return index;
	}
	
	@Override
	public String toString(){
		Integer stringIndex = new Integer(index);
		return stringIndex.toString();
	}
	
	/**
	 * Return list of connections from this Vertex
	 * @return ArrayList<Integer> connections from this Vertex
	 */
	public ArrayList<Integer> getConnections(){
		return connections;
	}
}
